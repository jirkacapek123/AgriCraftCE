plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.+'
}

repositories {
	mavenLocal()
	maven {
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "TerraformersMC"  // EMI
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "WTHIT's maven"
		url "https://maven2.bai.lol"
		content {
			includeGroup "lol.bai"
			includeGroup "mcp.mobius.waila"
		}
	}
}

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'
		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument '--nogui'
	}

	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(),
				'--existing', file('src/main/resources/').getAbsolutePath(),
				'--existing-mod', 'biomesoplenty'
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	implementation "net.neoforged:neoforge:${neoforge_version}"

	compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
	compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
//	localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

	compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
	localRuntime "dev.emi:emi-neoforge:${emi_version}"

	compileOnly "curse.maven:jade-324717:5427895"  // Jade-1.21-neoforge-15.0.4-api
	localRuntime "curse.maven:jade-324717:5427817"  // Jade-1.21-neoforge-15.0.4

	compileOnly "mcp.mobius.waila:wthit-api:neo-${wthit_version}"  // What The Hell Is That
//	localRuntime "mcp.mobius.waila:wthit:neo-${wthit_version}"
//	localRuntime "lol.bai:badpackets:neo-${badpackets_version}"

	implementation "curse.maven:biomes-o-plenty-220318:5437861"  // Biomes O' Plenty 1.21-21.0.0.7
	compileOnly "curse.maven:serene-seasons-291874:5429913"  // Serene Seasons 1.21-10.0.0.2
//	localRuntime "curse.maven:serene-seasons-291874:5429913"  // Serene Seasons 1.21-10.0.0.2
	localRuntime "curse.maven:glitchcore-955399:5429863"  // GlitchCore 1.21-2.0.0.1 (serene season / biomes o' plenty dep)
	localRuntime "curse.maven:terrablender-940057:5429865"  // TerraBlender 1.21-4.0.0.1 (biomes o' plenty dep)

}

subsystems {
	parchment {
		minecraftVersion = "${minecraft_version}"
		mappingsVersion = "${parchment_version}"
	}
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version : minecraft_version,
			neoforge_version  : neoforge_version,
			version           : version,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
